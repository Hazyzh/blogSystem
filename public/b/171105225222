<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv=Content-Type content="text/html;charset=utf-8">
        <meta name="keywords" contect="react.js, reudx, middleware, promise-middleware">
        <meta name="author" contect="hazyzh">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0">
        <title>redux-promiseMiddleware的最佳实践</title>
        <meta name="description" content="redux-promise-middleware 概述 实现原理 实践分析 效果如下 ">
        <link rel="shortcut icon" href="/favicon.ico"  type="image/x-icon">
        <style>
            *{
                margin: 0px;padding: 0px;
            }
            body{
                font: 17px/1.5 "Lucida Grande", "Lucida Sans Unicode", Helvetica, Arial, Verdana, sans-serif;
                background: white;
                margin: 0;
                color: #33333d;
                overflow-y: scroll;
                overflow-x: hidden;
            }
            header{
                height: 70px;
                line-height: 70px;
                overflow: hidden;
                background: #fafafa;
                box-shadow: 0px 2px 10px 0px rgba(0,0,0,0.1), 0 1px rgba(0,0,0,0.1);
                -webkit-box-shadow: 0px 2px 10px 0px rgba(0,0,0,0.1), 0 1px rgba(0,0,0,0.1);
                -moz-box-shadow: 0px 2px 10px 0px rgba(0,0,0,0.1), 0 1px rgba(0,0,0,0.1);
            }
            .header-content .home-logo{
                float: left;
                display: block;
                width: 50px;
                height: 50px;
                border-radius: 50%;
                margin-top: 10px;
                overflow: hidden;
                box-shadow: 1px 1px 1px #171411;
                -webkit-box-shadow: 1px 1px 1px #171411;
                -moz-box-shadow: 1px 1px 1px #171411;
            }
            .header-content .blog-info{
                float: right;
            }
            .header-content .blog-info a{
                color: #999;
                text-decoration: none;
                margin-right: 20px;
            }
            .header-content .blog-info a:hover{
                color: #71afae
            }
            .header-content a img{
                width: 100%;
                height: 100%;
            }

            h1{
                margin: 20px 0px;
            }

            p{
                font-weight: 300;
                letter-spacing: 1px;
                font-family: "Lucida Grande", "Lucida Sans Unicode", Helvetica, Arial, Verdana, sans-serif;
            }
            #content,.header-content{
                width: 1200px;
                margin: auto;
            }
            #content img{
                width: 100%;
            }
            #content li{
                list-style: circle;
                margin-left: 20px;
            }
			p code {
				padding: 3px 4px;
				font-size: 90%;
				color: #c7254e;
				background-color: #f9f2f4;
				border-radius: 4px;
				font-family: Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
			}
            pre{
                background: #eee;
                font-size: 17px;
                padding: 20px 0;
                border-radius: 10px;
                overflow: auto;
                font-weight: 300;
                text-shadow: 0 1px white;
                font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
                white-space: pre;
                word-spacing: normal;
                word-break: normal;
                word-wrap: normal;
                line-height: 1.5;
            }
            .info-title{
                display: block;
                margin: 10px;
            }
            .info-title .tags{
                background: #eee;
                padding: 5px;
                border-radius: 3px;
                margin-right: 5px;
                cursor: pointer;
            }
            .info-title .time{
                font-size: 14px;
                color: #999;
            }
            .line{
                display: block;
                width: 100%;
                height: 1px;
                background: #eee;
            }
            /*文章内容*/
            .blog-content{
                width: 800px;
                float: left;
            }
            .blog-aside{
                width: 400px;
                float: right;
            }
            .clearleft{
                clear:both;
                zoom:1;
            }
            .clearleft:after{
                display: table;
                content: "";
                clear: both;
            }
            .count-total{float: right;margin-right: 30px;}
        </style>
        <link rel="stylesheet" href="/styles/ocean.css">
        <link href="https://cdn.bootcss.com/antd/2.12.2/antd.min.css" rel="stylesheet">
        <link href="https://cdn.bootcss.com/animate.css/3.5.2/animate.min.css" rel="stylesheet">
        <link rel="stylesheet" href="/css/bundle.css">
    </head>
    <body>
        <header>
            <div class="header-content">
                <a href="/blog" class="home-logo">
                    <img src="/static/imgs/home.png" />
                </a>
                <div class="blog-info">
                    <a href="/blog">主页</a>
                    <a href="/blog/tags">标签分类</a>
                    <a href="/blog/about">关于</a>
                </div>
            </div>
        </header>
        <div id="content">
            <h1>redux-promiseMiddleware的最佳实践</h1>
            <span class="info-title clearleft">
                
                    <span class="tags">react</span>
                
                    <span class="tags">redux</span>
                
                    <span class="tags">最佳实践</span>
                
                <span class="time">2017年11月05日 22:52:22</span>
                <span class="count-total" id="countNumbers"></span>
            </span>
            <span class="line"></span>
            <div class="blog-container clearleft">
                <article class="blog-content">
                    <h3 id="hazyzh-h3-1">redux-promise-middleware 概述</h3><p>我们之前关于中间件已经有做过讨论。关于 <code>redux</code> 的中间件,我们常用的一个用来处理异步的中间件为 <code>redux-promise-middleware</code> ,相比较 <code>redux-promise</code> 它保留了乐观更新的能力。在启用它之后,我们可以触发一个 <code>payload</code> 属性为 <code>promise</code> 对象的 <code>action</code></p>
<pre><code class="lang-javascript"><span class="hljs-keyword">const</span> foo = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> ({
  <span class="hljs-keyword">type</span>: <span class="hljs-string">'FOO'</span>,
  payload: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>()
})
</code></pre>
<p>中间件会立即触发一个 <code>action</code>，类型为我们声明的类型加上<code>_PENDING</code>(后缀我们可以自己配置).</p>
<pre><code class="lang-javascript">{ <span class="hljs-attribute">type</span>: <span class="hljs-string">'FOO_PENDING'</span> }
</code></pre>
<p>等 <code>promise</code> 对象的状态发生改变(<code>resolved</code> 或者 <code>rejected</code> ), 中间件会触发另外一个 <code>action</code>，并且带着 <code>promise</code> 的信息。</p>
<pre><code class="lang-javascript">{
  <span class="hljs-attribute">type</span>: <span class="hljs-string">'FOO_FULFILLED'</span>
  payload: { ... }
}

{
  <span class="hljs-attribute">type</span>: <span class="hljs-string">'FOO_REJECTED'</span>
  payload: { ... }
}
</code></pre>
<h3 id="hazyzh-h3-2">实现原理</h3><p>关于它的<a href="https://github.com/pburtchaell/redux-promise-middleware/blob/master/src/index.js">源码</a>, 其实比较容易理解, 就是判断了一下 <code>action</code> 的 <code>payload</code> 属性</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">action</span>.payload) {
   <span class="hljs-keyword">if</span> (<span class="hljs-comment">!isPromise(action.payload) &amp;&amp; !isPromise(action.payload.promise)) {</span>
     <span class="hljs-keyword">return</span> next(<span class="hljs-keyword">action</span>);
   }
 } <span class="hljs-keyword">else</span> {
   <span class="hljs-keyword">return</span> next(<span class="hljs-keyword">action</span>);
 }
</code></pre>
<p>如果是 <code>promise</code> 对象则理解触发一个代表异步开始的 <code>action</code></p>
<pre><code class="lang-javascript"><span class="hljs-title">next</span>({
    <span class="hljs-class"><span class="hljs-keyword">type</span>: [<span class="hljs-keyword">type</span>, _PENDING].join(<span class="hljs-title">promiseTypeSeparator</span>),</span>
    ...(<span class="hljs-class"><span class="hljs-keyword">data</span> !== undefined ? { <span class="hljs-title">payload</span>: <span class="hljs-title">data</span> } : {}),</span>
    ...(meta !== undefined ? { meta } : {})
});
</code></pre>
<p>然后等待这个 <code>promise</code> 对象状态改变后,根据成功与否触发不同的 <code>action</code> 并且携带这数据或者错误信息。结合作者的注释还是很容易看懂的。</p>
<h3 id="hazyzh-h3-3">实践分析</h3><p>实践中,几乎每一个异步操作都有必要增加它乐观更新的能力,哪怕是一个简单的 <code>button</code>, 在操作中也会需要它有个 <code>loading</code> 状态，一方面给用户更好的体验，另一方面也防止了重复请求。</p>
<p>但是为了在 <code>redux</code> 中使用这个状态，不可避免的要针对每个异步 <code>action</code> 去声明很多变量去维护这个变量的值。如下</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">switch</span> (action.type) {
    <span class="hljs-keyword">case</span> <span class="hljs-string">'MY_ACTION_TYPE_PENDING'</span>:
        <span class="hljs-keyword">return</span> {...state, <span class="hljs-string">myActionLoading:</span> <span class="hljs-literal">true</span>}
    <span class="hljs-keyword">case</span> <span class="hljs-string">'MY_ACTION_TYPE_FULFILLED'</span>:
        <span class="hljs-keyword">return</span> {...state, xxx,  <span class="hljs-string">myActionLoading:</span> <span class="hljs-literal">false</span>}
    <span class="hljs-keyword">case</span> <span class="hljs-string">'MY_ACTION_TYPE_REJECTED'</span>:
        <span class="hljs-keyword">return</span> {...state, <span class="hljs-string">myActionLoading:</span> <span class="hljs-literal">false</span>}
}
</code></pre>
<p>我们写了很多这种重复的代码去做这种相同的事情, 既然我们每一个 <code>action</code> 的 <code>type</code> 都是唯一的。为什么不做一个通用的方法去处理这种状态基的维护呢。</p>
<p>假如我们专门声明一个 <code>reducer</code> 去处理状态改变的事件。修改 <code>redux-promise-middleware</code> 处理过程,当有异步事件开始或者状态改变时,我们除了触发原来的事件外，也触发一个特殊事件的 <code>action</code>，它携带当前事件的 <code>type</code> 和 <code>状态</code> 作为参数, 当接收到这个事件后我们把这个 <code>reducer</code> 对应的 <code>type</code> 的状态改为参数的的状态。这样我们就可以自动的更新每一个 <code>action</code> 目前的状态值了。</p>
<pre><code class="lang-javascript">// reducer 类似如下
// STATEMACHINE 指的是对应特殊事件的 `action's type`
import { STATEMACHINE } <span class="hljs-keyword">from</span> 'redux-promise-middleware'

const uiStateStore = (<span class="hljs-keyword">state</span> = {}, action) =&gt; {
    switch (action.type) {
        case STATEMACHINE: {
            let { actionType, isFetching } = action
            return {
                ...<span class="hljs-keyword">state</span>,
                [actionType]: isFetching
            }
        }
        <span class="hljs-keyword">default</span>:
            return <span class="hljs-keyword">state</span>
    }
}


<span class="hljs-variable">&lt;Button
      loading={this.props.isLoading} /&gt;</span>

...

const mapStateToProps = <span class="hljs-keyword">state</span> =&gt; ({
    ...,
    isLoading: <span class="hljs-keyword">state</span>.uiState.MY_ACTION_TYPE
})
</code></pre>
<h3 id="hazyzh-h3-4">效果如下</h3><p><img src="https://hazyzh.oss-cn-shenzhen.aliyuncs.com/imgs/redux/WechatIMG42.jpeg" alt="promise-middleware"></p>
<p>可以在项目 <a href="https://github.com/Hazyzh/reacts-ggsddu"><code>react-ggsddu</code></a> 运行 <code>npm run async-2</code> 体验。</p>

                    <div id="comment" class="comment"></div>
                </article>
                <aside class="blog-aside" id="asideContent">
                </aside>
            </div>
        </div>
        <script src="https://cdn.bootcss.com/react/15.6.1/react.min.js"></script>
        <script src="https://cdn.bootcss.com/react/15.6.1/react-dom.min.js"></script>
        <script src="https://cdn.bootcss.com/antd/2.12.2/antd.min.js"></script>
        <script type="text/javascript" src="/js/bundle.js"></script>
    </body>
</html>
