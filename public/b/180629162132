<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv=Content-Type content="text/html;charset=utf-8">
        <meta name="keywords" contect="force download, 强制下载, 浏览器下载，文件响应返回头">
        <meta name="author" contect="hazyzh">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0">
        <title>怎么去控制浏览器对资源文件的处理行为</title>
        <meta name="description" content="浏览器是怎么处理文件链接的 强制下载文件 a标签的download属性 改变资源格式 配置Content-Disposition 用户自己在浏览器设置 ">
        <link rel="shortcut icon" href="/favicon.ico"  type="image/x-icon">
        <style>
            *{
                margin: 0px;padding: 0px;
            }
            body{
                font: 17px/1.5 "Lucida Grande", "Lucida Sans Unicode", Helvetica, Arial, Verdana, sans-serif;
                background: white;
                margin: 0;
                color: #33333d;
                overflow-y: scroll;
                overflow-x: hidden;
            }
            header{
                height: 70px;
                line-height: 70px;
                overflow: hidden;
                background: #fafafa;
                box-shadow: 0px 2px 10px 0px rgba(0,0,0,0.1), 0 1px rgba(0,0,0,0.1);
                -webkit-box-shadow: 0px 2px 10px 0px rgba(0,0,0,0.1), 0 1px rgba(0,0,0,0.1);
                -moz-box-shadow: 0px 2px 10px 0px rgba(0,0,0,0.1), 0 1px rgba(0,0,0,0.1);
            }
            .header-content .home-logo{
                float: left;
                display: block;
                width: 50px;
                height: 50px;
                border-radius: 50%;
                margin-top: 10px;
                overflow: hidden;
                box-shadow: 1px 1px 1px #171411;
                -webkit-box-shadow: 1px 1px 1px #171411;
                -moz-box-shadow: 1px 1px 1px #171411;
            }
            .header-content .blog-info{
                float: right;
            }
            .header-content .blog-info a{
                color: #999;
                text-decoration: none;
                margin-right: 20px;
            }
            .header-content .blog-info a:hover{
                color: #71afae
            }
            .header-content a img{
                width: 100%;
                height: 100%;
            }

            h1{
                margin: 20px 0px;
            }

            p{
                font-weight: 300;
                letter-spacing: 1px;
                font-family: "Lucida Grande", "Lucida Sans Unicode", Helvetica, Arial, Verdana, sans-serif;
            }
            #content,.header-content{
                width: 1200px;
                margin: auto;
            }
            #content img{
                width: 100%;
            }
            #content li{
                list-style: circle;
                margin-left: 20px;
            }
			p code {
				padding: 3px 4px;
				font-size: 90%;
				color: #c7254e;
				background-color: #f9f2f4;
				border-radius: 4px;
				font-family: Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
			}
            pre{
                background: #eee;
                font-size: 17px;
                padding: 20px 0;
                border-radius: 10px;
                overflow: auto;
                font-weight: 300;
                text-shadow: 0 1px white;
                font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
                white-space: pre;
                word-spacing: normal;
                word-break: normal;
                word-wrap: normal;
                line-height: 1.5;
            }
            .info-title{
                display: block;
                margin: 10px;
            }
            .info-title .tags{
                background: #eee;
                padding: 5px;
                border-radius: 3px;
                margin-right: 5px;
                cursor: pointer;
            }
            .info-title .time{
                font-size: 14px;
                color: #999;
            }
            .line{
                display: block;
                width: 100%;
                height: 1px;
                background: #eee;
            }
            /*文章内容*/
            .blog-content{
                width: 800px;
                float: left;
            }
            .blog-aside{
                width: 400px;
                float: right;
            }
            .clearleft{
                clear:both;
                zoom:1;
            }
            .clearleft:after{
                display: table;
                content: "";
                clear: both;
            }
            .count-total{float: right;margin-right: 30px;}
        </style>
        <link rel="stylesheet" href="/styles/ocean.css">
        <link href="https://cdn.bootcss.com/antd/2.12.2/antd.min.css" rel="stylesheet">
        <link href="https://cdn.bootcss.com/animate.css/3.5.2/animate.min.css" rel="stylesheet">
        <link rel="stylesheet" href="/css/bundle.css">
    </head>
    <body>
        <header>
            <div class="header-content">
                <a href="/blog" class="home-logo">
                    <img src="/static/imgs/home.png" />
                </a>
                <div class="blog-info">
                    <a href="/blog">主页</a>
                    <a href="/blog/tags">标签分类</a>
                    <a href="/blog/about">关于</a>
                </div>
            </div>
        </header>
        <div id="content">
            <h1>怎么去控制浏览器对资源文件的处理行为</h1>
            <span class="info-title clearleft">
                
                    <span class="tags">标签属性</span>
                
                    <span class="tags"> 最佳实践</span>
                
                <span class="time">2018年06月29日 16:21:32</span>
                <span class="count-total" id="countNumbers"></span>
            </span>
            <span class="line"></span>
            <div class="blog-container clearleft">
                <article class="blog-content">
                    <h3 id="hazyzh-h3-1">浏览器是怎么处理文件链接的</h3><p>通常当用户打开一个资源的<code>url</code>,如果浏览器支持这个格式的文件的情况下，浏览器会尝试去再页面里展示它而不是直接下载。例如一张图片(<code>jpg, png, gif等</code>)，几乎所有浏览器都会去将图片在浏览器里面展示。</p>
<p>对于压缩格式的文件(<code>zip, tar, gzip等</code>)浏览器总是会直接去下载它们，另外一些格式的文件，根据浏览器的不同也会有差异的处理方法，例如<code>Microsoft Word</code>文件(<code>doc, docx</code>)在<code>ie</code>浏览器下通常会在浏览器中展示，但是其他浏览器几乎都会直接下载它，同样的对于<code>PDF</code>文件<code>chrome</code>有自己的<code>pdf 转换器</code>它会尝试去在浏览器上展示该文件。</p>
<h3 id="hazyzh-h3-2">强制下载文件</h3><p>对于浏览器这种行为，一般情况下是可以接受的，因为用户可以在浏览器显示文件后将文件保存到电脑中，但是一些情况下用户可能希望文件直接被下载而不是在浏览器中被打开，比如有时候用户想去下载一个歌曲，但是浏览器可能回去播放该音频。那么怎么让浏览器强制去下载文件要怎么做呢</p>
<h4 id="hazyzh-h4-1">a标签的download属性</h4><p><code>html5</code>中 <code>a</code> 标签新增了 <code>download</code> 属性，该属性指示浏览器下载<code>url</code>的内容而不是导航到<code>url</code>，因此如果配置了此属性用户会直接下载<code>url</code>的内容。作为开发如果想直接触发该事件我们可以直接用代码模拟a标签和点击事件</p>
<pre><code class="lang-javascript">
    <span class="hljs-keyword">const</span> link = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'a'</span>);
    link.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
      link.download = xxx;
      link.href = xxx;
    });
    <span class="hljs-keyword">const</span> e = <span class="hljs-built_in">document</span>.createEvent(<span class="hljs-string">'MouseEvents'</span>);
    e.initEvent(<span class="hljs-string">'click'</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);
    link.dispatchEvent(e);

</code></pre>
<blockquote>
<ul>
<li><code>download</code>属性只在同域时候有效，当跨域请求时候该属性将会被忽略。</li>
<li>当前并非所以浏览器都支持该属性，需要浏览器考虑兼容性。</li>
</ul>
</blockquote>
<h4 id="hazyzh-h4-2">改变资源格式</h4><p>浏览器会根据资源类型去判断是否支持，如果支持时会尝试去在页面上展示该资源。浏览器判断资源类型是根据返回头<code>Content-Type</code>的值，因此一方面我们在服务端可以设置返回头字段为文件流<code>&#39;Content-Type&#39;: &#39;application/octet-stream&#39;</code>，或者根据一些具体资源直接压缩后传输，浏览器不能分析<code>zip</code>之类的压缩文件所以会直接去下载它们。</p>
<h4 id="hazyzh-h4-3">配置Content-Disposition</h4><p>在HTTP场景中，<code>Content-Disposition</code> 消息头指示回复的内容该以何种形式展示，是以内联的形式（即网页或者页面的一部分），还是以附件的形式下载并保存到本地。</p>
<blockquote>
<ul>
<li><code>inline</code>默认参数表示消息体会以页面的一部分或者整个页面的形式展示。</li>
<li><code>attachment</code> 消息体应该被下载到本地，将参数<code>filename</code>的值预填为下载后的文件名</li>
</ul>
</blockquote>
<p>因此当我们希望该资源被直接下载时候，我们可以设置返回头<code>Content-Disposition</code>的值为<code>attachment</code>。</p>
<pre><code class="lang-linux">    <span class="hljs-comment">//example</span>
    Content-<span class="hljs-string">Disposition:</span> attachment; filename=<span class="hljs-string">"fname.ext"</span>
</code></pre>
<p>这里设置名称时候，要注意下<code>filename</code>的编码格式。</p>
<h4 id="hazyzh-h4-4">用户自己在浏览器设置</h4><p>浏览器既然定义了该行为，根据浏览器的不同用户可能在设置页面去配置某些格式的文件是否希望浏览器去展示该文件。一些有争议的情况下，你也可以提示用户自己根据需求去设置这些参数。</p>

                    <div id="comment" class="comment"></div>
                </article>
                <aside class="blog-aside" id="asideContent">
                </aside>
            </div>
        </div>
        <script src="https://cdn.bootcss.com/react/15.6.1/react.min.js"></script>
        <script src="https://cdn.bootcss.com/react/15.6.1/react-dom.min.js"></script>
        <script src="https://cdn.bootcss.com/antd/2.12.2/antd.min.js"></script>
        <script type="text/javascript" src="/js/bundle.js"></script>
    </body>
</html>
