<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv=Content-Type content="text/html;charset=utf-8">
        <meta name="keywords" contect="react, redux, compose, middleware, redux-middleware, javascript">
        <meta name="author" contect="hazyzh">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0">
        <title>redux-middleware的实现</title>
        <meta name="description" content="从 &lt;code&gt;compose&lt;/code&gt; 函数开始 redux 的中间件 redux 规定的 middleware 格式 中间件各个参数含义 思考 参考 ">
        <link rel="shortcut icon" href="/favicon.ico"  type="image/x-icon">
        <style>
            *{
                margin: 0px;padding: 0px;
            }
            body{
                font: 17px/1.5 "Lucida Grande", "Lucida Sans Unicode", Helvetica, Arial, Verdana, sans-serif;
                background: white;
                margin: 0;
                color: #33333d;
                overflow-y: scroll;
                overflow-x: hidden;
            }
            header{
                height: 70px;
                line-height: 70px;
                overflow: hidden;
                background: #fafafa;
                box-shadow: 0px 2px 10px 0px rgba(0,0,0,0.1), 0 1px rgba(0,0,0,0.1);
                -webkit-box-shadow: 0px 2px 10px 0px rgba(0,0,0,0.1), 0 1px rgba(0,0,0,0.1);
                -moz-box-shadow: 0px 2px 10px 0px rgba(0,0,0,0.1), 0 1px rgba(0,0,0,0.1);
            }
            .header-content .home-logo{
                float: left;
                display: block;
                width: 50px;
                height: 50px;
                border-radius: 50%;
                margin-top: 10px;
                overflow: hidden;
                box-shadow: 1px 1px 1px #171411;
                -webkit-box-shadow: 1px 1px 1px #171411;
                -moz-box-shadow: 1px 1px 1px #171411;
            }
            .header-content .blog-info{
                float: right;
            }
            .header-content .blog-info a{
                color: #999;
                text-decoration: none;
                margin-right: 20px;
            }
            .header-content .blog-info a:hover{
                color: #71afae
            }
            .header-content a img{
                width: 100%;
                height: 100%;
            }

            h1{
                margin: 20px 0px;
            }

            p{
                font-weight: 300;
                letter-spacing: 1px;
                font-family: "Lucida Grande", "Lucida Sans Unicode", Helvetica, Arial, Verdana, sans-serif;
            }
            #content,.header-content{
                width: 1200px;
                margin: auto;
            }
            #content img{
                width: 100%;
            }
            #content li{
                list-style: circle;
                margin-left: 20px;
            }
			p code {
				padding: 3px 4px;
				font-size: 90%;
				color: #c7254e;
				background-color: #f9f2f4;
				border-radius: 4px;
				font-family: Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
			}
            pre{
                background: #eee;
                font-size: 17px;
                padding: 20px 0;
                border-radius: 10px;
                overflow: auto;
                font-weight: 300;
                text-shadow: 0 1px white;
                font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
                white-space: pre;
                word-spacing: normal;
                word-break: normal;
                word-wrap: normal;
                line-height: 1.5;
            }
            .info-title{
                display: block;
                margin: 10px;
            }
            .info-title .tags{
                background: #eee;
                padding: 5px;
                border-radius: 3px;
                margin-right: 5px;
                cursor: pointer;
            }
            .info-title .time{
                font-size: 14px;
                color: #999;
            }
            .line{
                display: block;
                width: 100%;
                height: 1px;
                background: #eee;
            }
            /*文章内容*/
            .blog-content{
                width: 800px;
                float: left;
            }
            .blog-aside{
                width: 400px;
                float: right;
            }
            .clearleft{
                clear:both;
                zoom:1;
            }
            .clearleft:after{
                display: table;
                content: "";
                clear: both;
            }
            .count-total{float: right;margin-right: 30px;}
        </style>
        <link rel="stylesheet" href="/styles/ocean.css">
        <link href="https://cdn.bootcss.com/antd/2.12.2/antd.min.css" rel="stylesheet">
        <link href="https://cdn.bootcss.com/animate.css/3.5.2/animate.min.css" rel="stylesheet">
        <link rel="stylesheet" href="/css/bundle.css">
    </head>
    <body>
        <header>
            <div class="header-content">
                <a href="/blog" class="home-logo">
                    <img src="/static/imgs/home.png" />
                </a>
                <div class="blog-info">
                    <a href="/blog">主页</a>
                    <a href="/blog/tags">标签分类</a>
                    <a href="/blog/about">关于</a>
                </div>
            </div>
        </header>
        <div id="content">
            <h1>redux-middleware的实现</h1>
            <span class="info-title clearleft">
                
                    <span class="tags">react</span>
                
                    <span class="tags"> redux</span>
                
                    <span class="tags"> middleware</span>
                
                <span class="time">2017年11月02日 14:01:47</span>
                <span class="count-total" id="countNumbers"></span>
            </span>
            <span class="line"></span>
            <div class="blog-container clearleft">
                <article class="blog-content">
                    <h3 id="hazyzh-h3-1">从 <code>compose</code> 函数开始</h3><p>在函数式编程当中有一个很重要的概念就是函数组合，实际上就是把处理数据的函数像管道一样连接起来，然后让数据穿过管道得到最终的结果。</p>
<pre><code class="lang-javascript">
    <span class="hljs-keyword">const</span> add = <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x + <span class="hljs-number">2</span>  <span class="hljs-comment">// 加</span>
    <span class="hljs-keyword">const</span> minus = <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x - <span class="hljs-number">2</span>    <span class="hljs-comment">// 减</span>
    <span class="hljs-keyword">const</span> mul = <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x * <span class="hljs-number">2</span>    <span class="hljs-comment">// 乘</span>
    <span class="hljs-keyword">const</span> div = <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x / <span class="hljs-number">2</span>  <span class="hljs-comment">// 除</span>

    minus(mul(add(<span class="hljs-number">3</span>))) <span class="hljs-comment">// =&gt; 8</span>
</code></pre>
<p>如果我想对一个参数执行上面的 <code>add, mul, minus</code> 函数, 然后得到返回值, 上面的写法可读性就会很差, 这时候我们就需要一个 <code>compose</code> 函数, 它可以接受上面的函数作为参数, 然后返回一个函数, 返回的这个函数也可以达成上面的效果, 如下</p>
<pre><code class="lang-javascript">
    ...
    <span class="hljs-keyword">const</span> myOperate1 = compose(minus, mul, <span class="hljs-keyword">add</span>) <span class="hljs-comment">// 加 =&gt; 乘 =&gt; 减</span>
    <span class="hljs-keyword">const</span> myOperate2 = compose(<span class="hljs-keyword">div</span>, <span class="hljs-keyword">add</span>, mul) <span class="hljs-comment">// 乘 =&gt; 加 =&gt; 除</span>

    myOperate1(<span class="hljs-number">3</span>) <span class="hljs-comment">// =&gt; 8</span>
    myOperate2(<span class="hljs-number">3</span>) <span class="hljs-comment">// =&gt; 4</span>

</code></pre>
<p>关于 <code>compose</code> 很多函数编程库里面都有实现, 这里我们不考虑一些特殊情况, 对于这个需求自己简单实现一下大概类似这样</p>
<pre><code class="lang-javascript">    const compose = <span class="hljs-function"><span class="hljs-params">(...args)</span> =&gt;</span> args.reduce( <span class="hljs-function"><span class="hljs-params">(pre, d)</span> =&gt;</span> num =&gt; pre(d(num)) )
</code></pre>
<p>在 <a href="https://scriptoj.com/problems/27"><code>ScriptOJ</code></a> (<em>一个关于 Web 前端开发评测系统的网站</em>) 上也有这样一道题, 可以自己去测试下。</p>
<h3 id="hazyzh-h3-2">redux 的中间件</h3><p>我们之前有去<a href="https://github.com/Hazyzh/reacts-ggsddu/blob/master/docs/thunkPriomise.md">手动实现 <code>redux</code> 异步</a>, 其实也算有一些简单的中间件, 最终目的就是改造了 <code>store</code> 的 <code>dispatch</code> 函数。但是当时自己纯粹为了实现目的，代码可读性和延展性几乎没有。用过 <code>nodejs</code> 的 <code>koa</code> 框架的一定知道中间件这个概念。<code>redux</code> 这里也是使用了中间件的思想, 用来增强 <code>redux</code> 的 <code>dispatch</code> 函数。</p>
<p><img src="https://hazyzh.oss-cn-shenzhen.aliyuncs.com/imgs/redux/%E4%B8%9C%E8%8E%9E%E4%BA%8B%E4%B8%9A%E9%83%A8%E5%82%AC%E8%B4%B9%E6%95%B0%E6%8D%AE.png" alt="redux-middleware"></p>
<h4 id="hazyzh-h4-1">redux 规定的 middleware 格式</h4><pre><code class="lang-javascript">
<span class="hljs-comment">// redux 中间件 middleware 的格式</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store =&gt; <span class="hljs-function"><span class="hljs-params">next</span> =&gt;</span> action =&gt; {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'dispatch: '</span>, action)
    next()
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'finish: '</span>, action)
}

</code></pre>
<p>上面的代码我们可以感受很多函数编程的思想(<em>这也是我喜欢 <code>react</code> 一个很重要的原因</em>), 函数编程中有一个重要的概念 <code>柯里化</code>, 其实我们之前去实现 <code>compose</code> 函数时候细心的同学也能发现, 作为 <code>compose</code> 函数的参数, 这些函数应该都只接受一个参数, <code>redux</code> 规定的中间件写法是一个链式返回函数的写法, 中间的参数都已经固定了, 也就是我们只能在最后的代码框里书写中间件的业务逻辑, 在这个里面我们可以拿到哪些参数使用呢, 很明显就是上面链式返回函数里的参数。</p>
<p><code>action</code> 我们很容易想到 <code>dispatch</code> 函数的参数就叫做 <code>action</code>, 但其实这里拿到的 <code>action</code> 应该是我们原始的内容经过 <code>redux</code> 的 <code>middleware</code> 一层一层处理到当前中间件时候的 <code>action</code>, 有了 <code>action</code> 我们要怎么处理它， 我们最原始的 <code>dispatch</code> 函数去哪里了, <code>store</code> 和 <code>next</code> 又指的是什么呢？带着问题我们继续看他后面是怎么处理的。</p>
<h4 id="hazyzh-h4-2">中间件各个参数含义</h4><pre><code class="lang-javascript">
// redux 对 middleware 的处理
...
const <span class="hljs-attr">store</span> = createStore(...args)
<span class="hljs-keyword">let</span> <span class="hljs-attr">dispatch</span> = store.dispatch
<span class="hljs-keyword">let</span> <span class="hljs-attr">chain</span> = []

const <span class="hljs-attr">middlewareAPI</span> = {
    getState: store.getState,
    dispatch: (...args) =&gt; dispatch(...args)
}
<span class="hljs-attr">chain</span> = middlewares.<span class="hljs-built_in">map</span>(<span class="hljs-attr">middleware</span> =&gt; middleware(middlewareAPI))
<span class="hljs-attr">dispatch</span> = compose(...chain)(store.dispatch)
...

</code></pre>
<p>这里 <code>middlewares</code> 就是我们创建 <code>store</code> 时候传入的中间件数组, 这里先是对 <code>middlewares</code> <code>map</code> 循环传入参数  <code>middlewareAPI</code> 得到返回值。 这里<code>middleware</code> 传入的第一个参数 <code>store</code> 已经找到了, 我们可以在 <code>store</code> 上取到 <code>getState</code> 和 <code>dispatch</code> 这两个函数。那么 <code>next</code> 函数又是传入的呢, 这里我们看到了熟悉的 <code>compose</code> 函数了, 我们来看看这里 <code>compose</code> 函数的实现。</p>
<pre><code class="lang-javascript">
<span class="hljs-comment">// 处理中间件的 compose 函数</span>
export <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compose</span><span class="hljs-params">(<span class="hljs-rest_arg">...funcs</span>)</span> </span>{
  <span class="hljs-keyword">if</span> (funcs.length === <span class="hljs-number">0</span>) {
    <span class="hljs-keyword">return</span> arg =&gt; arg
  }

  <span class="hljs-keyword">if</span> (funcs.length === <span class="hljs-number">1</span>) {
    <span class="hljs-keyword">return</span> funcs[<span class="hljs-number">0</span>]
  }

  <span class="hljs-keyword">return</span> funcs.reduce((a, b) =&gt; (...args) =&gt; a(b(...args)))
}

</code></pre>
<p>这里的 <code>funcs</code> 指的就是上面的 <code>chain</code> 数组, 这里多了对于中间件个数的判断, 最后通过 <code>reduce</code> 的实现已经和我们开篇讲的非常相似了。这里同样是把这些函数功能叠加起来, <code>a</code> 相当于排在前买呢对 <code>middleware</code>, <code>b</code> 则是靠后的 <code>middleware</code> , 可以看到 <code>a</code> 执行的参数传入的是 <code>b(...args)</code>, 所以对于 <code>a</code> 来说它获取到的 <code>next</code> 就是经过 <code>b</code> 处理过的 <code>dispatch</code>。</p>
<p>有时候抽象的东西总是难以理解, 我们这里假设传入中间件一共有三个【我们熟悉的 thunk, promsie 和 logger】, 所以这里执行完效果应该如下</p>
<p><img src="https://hazyzh.oss-cn-shenzhen.aliyuncs.com/imgs/redux/redux-middleware.png" alt="redux-middleware"></p>
<ul>
<li>对 <code>logger</code>      而言      <strong>next</strong> --&gt; <code>dispatch</code></li>
<li>对 <code>promise</code>    而言     <strong>next</strong> --&gt; <code>logger 处理</code> - <code>dispatch</code></li>
<li>对 <code>thunk</code>    而且     <strong>next</strong> --&gt; <code>promise 处理</code> - <code>logger 处理</code> - <code>dispatch</code></li>
</ul>
<p>这里注意 <code>middlewareAPI</code> 中的 <code>dispatch</code> 熟悉并没有简单的就赋值为 <code>dispatch</code>, 而是包装成一个函数,当函数调用时去调用 <code>dispatch</code>, 而后面 <code>dispatch</code> 会被重新赋值, 所以中间件通过参数 <code>store</code> 拿到的 <code>dispatch</code>的功能应该等同于包装后的 <code>dispatch</code>.</p>
<p><code>redux-logger</code> 中有这样一句提示：<code>Note: logger must be the last middleware in chain, otherwise it will log thunk and promise, not actual actions</code>, 希望你把 <code>logger</code> 这个中间件作为最后一个参数, 正是因为放在前面的中间件有可能会改变 <code>action</code> ,最后这个最贴近原始 <code>dispatch</code> 位置的中间件拿到的 <code>action</code> 基本都是用户最终想要的实际类型。</p>
<h3 id="hazyzh-h3-3">思考</h3><p>学习 <code>react</code> 的过程中, 对 <code>函数式编程</code> 有了新的认识, 让之前很多只停留在了解层面的知识点有了实际应用的地方。感觉很多概念理解起来会比较抽象, 但是仔细研究后又会觉得很优雅。</p>
<h3 id="hazyzh-h3-4">参考</h3><ul>
<li><a href="http://redux.js.org/docs/api/applyMiddleware.html">redux.js/applyMiddleware</a></li>
<li><a href="https://segmentfault.com/a/1190000004485808">redux middleware 详解</a></li>
</ul>

                    <div id="comment" class="comment"></div>
                </article>
                <aside class="blog-aside" id="asideContent">
                </aside>
            </div>
        </div>
        <script src="https://cdn.bootcss.com/react/15.6.1/react.min.js"></script>
        <script src="https://cdn.bootcss.com/react/15.6.1/react-dom.min.js"></script>
        <script src="https://cdn.bootcss.com/antd/2.12.2/antd.min.js"></script>
        <script type="text/javascript" src="/js/bundle.js"></script>
    </body>
</html>
